{"version":3,"sources":["examples.scss","../../bower_components/upbase/scss/mixins/_grid.scss","../../bower_components/upbase/scss/mixins/_clearfix.scss"],"names":[],"mappings":"AAIA;EACE,YAAY;EACZ,+BAA+B;EAC/B,oBAAoB;EACpB,+BAAuB;UAAvB,uBAAuB,EACxB;;AAED;EACE,oBACD,EAAC;;AAEF;EACE,oBACD,EAAC;;AAEF;EACE,0BAA0B;EAC1B,eAAa;EACb,kBAAkB;EAClB,cAAc,EACf;;AAED;EC+HE,mBAAwB,ED7HzB;EAFD;IEMI,YAAY;IACZ,eAAe;IACf,YAAY,EACb;EFTH;ICyJM,YAAY;IACZ,mBAAc;IACd,iBALc,EAWf;EDjKL;ICsKI,YAAY,EACb;EDvKH;IC6KI,YAAY,EACb","file":"examples.css","sourcesContent":["\n// Import Upbase\n@import \"upbase/scss/_upbase\";\n\n* {\n  color: #444;\n  font-family: \"Source Sans Pro\";\n  font-weight: normal;\n  box-sizing: border-box;\n}\n\n.grid {\n  margin-bottom: 50px\n}\n\n.ui-item, .grid > div {\n  margin-bottom: 10px\n}\n\n.grid > div > div {\n  background-color: #bada55;\n  color: darken(#bada55, 25%);\n  min-height: 100px;\n  padding: 10px;\n}\n\n.grid-3 {\n  @include grid(3);\n}\n","/// Create a row of liquid columns of defined width, or an infinite grid of items of equal width. Apply mixin to parent container.\n/// @param {Number | Number[%] List } $items [2] - Number of equal-sized items per row, or list of widths for as many items as desired\n/// @param {Number[%/px]} $gutter [20px] - Gutter between items\n/// @param {String} $target [$grid-target(*)] - Target items\n/// @require {mixin} clearfix\n/// @require {variable} support-ie7\n/// @require {variable} ie-conditional-classes\n/// @require {variable} grid-target\n/// @link http://codepen.io/upstatement/pen/ZGwKMK See it on Codepen\n/// @example markup - HTML\n/// <section class=\"grid-3\">\n///     <div class=\"grid-item\"></div>\n///     <div class=\"grid-item\"></div>\n///     <div class=\"grid-item\">/div>\n/// </section>\n/// @example scss - SCSS\n/// .grid-3 {\n///   @include grid(3);\n/// }\n///\n/// .grid-25-50-25 {\n///   @include grid(25% 50% 25%, 5px, \".ui-item\");\n/// }\n///\n/// .grid-4 {\n///   @include grid(4, 2.5%);\n/// }\n///\n/// .grid-5-complex {\n///   @include grid(10% 30% 10% 40% 10%);\n/// }\n/// @example css - CSS Output\n/// .grid-3 {\n///   margin-left: -20px;\n/// }\n/// .grid-3:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n/// .grid-3 > * {\n///   float: left;\n///   padding-left: 20px;\n///   width: 33.33333%;\n/// }\n/// .grid-3 > *:nth-child(1n) {\n///   clear: none;\n/// }\n/// .grid-3 > *:nth-child(3n + 1) {\n///   clear: both;\n/// }\n///\n/// .grid-25-50-25 {\n///   margin-left: -5px;\n/// }\n/// .grid-25-50-25:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n/// .grid-25-50-25 > .ui-item:nth-child(1) {\n///   float: left;\n///   padding-left: 5px;\n///   width: 25%;\n/// }\n/// .grid-25-50-25 > .ui-item:nth-child(2) {\n///   float: left;\n///   padding-left: 5px;\n///   width: 50%;\n/// }\n/// .grid-25-50-25 > .ui-item:nth-child(3) {\n///   float: left;\n///   padding-left: 5px;\n///   width: 25%;\n/// }\n/// .grid-25-50-25 > .ui-item:nth-child(1n) {\n///   clear: none;\n/// }\n/// .grid-25-50-25 > .ui-item:nth-child(3n + 1) {\n///   clear: both;\n/// }\n///\n/// .grid-4 {\n///   margin-left: -2.5%;\n/// }\n/// .grid-4:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n/// .grid-4 > * {\n///   float: left;\n///   padding-left: 2.5%;\n///   width: 25%;\n/// }\n/// .grid-4 > *:nth-child(1n) {\n///   clear: none;\n/// }\n/// .grid-4 > *:nth-child(4n + 1) {\n///   clear: both;\n/// }\n///\n/// .grid-5-complex {\n///   margin-left: -20px;\n/// }\n/// .grid-5-complex:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n/// .grid-5-complex > *:nth-child(1) {\n///   float: left;\n///   padding-left: 20px;\n///   width: 10%;\n/// }\n/// .grid-5-complex > *:nth-child(2) {\n///   float: left;\n///   padding-left: 20px;\n///   width: 30%;\n/// }\n/// .grid-5-complex > *:nth-child(3) {\n///   float: left;\n///   padding-left: 20px;\n///   width: 10%;\n/// }\n/// .grid-5-complex > *:nth-child(4) {\n///   float: left;\n///   padding-left: 20px;\n///   width: 40%;\n/// }\n/// .grid-5-complex > *:nth-child(5) {\n///   float: left;\n///   padding-left: 20px;\n///   width: 10%;\n/// }\n/// .grid-5-complex > *:nth-child(1n) {\n///   clear: none;\n/// }\n/// .grid-5-complex > *:nth-child(5n + 1) {\n///   clear: both;\n/// }\n\n@mixin grid(\n  $items: 2,\n  $gutter: 20px,\n  $target: $grid-target) {\n\n  //Variables\n  $list-length: length($items);\n  $items-per-row: null; //determined later in mixin, globally defined here\n\n  //Parent container styles\n  @include clearfix;\n  margin-left: -#{$gutter};\n\n  //Child grid styles\n  //If length of items list is gt 1, means multi-column widths provided\n  @if $list-length > 1 {\n    $items-per-row: $list-length;\n    @for $i from 1 through $list-length {\n      $item-size: nth($items, $i);\n\n      > #{$target}:nth-child(#{$i}) {\n        float: left;\n        padding-left: #{$gutter};\n        width: $item-size;\n        @if $support-ie7 == true and $ie-conditional-classes == true {\n          .ie7 & {\n            width: floor($item-size);\n          }\n        }\n      }\n    }\n  } @elseif $list-length == 1 {\n    //If length of list is 1, use evenly-sized items\n    $items-per-row: $items;\n    $item-size: 100% / $items;\n\n    > #{$target} {\n      float: left;\n      padding-left: #{$gutter};\n      width: $item-size;\n      @if $support-ie7 == true and $ie-conditional-classes == true {\n        .ie7 & {\n          width: floor($item-size);\n        }\n      }\n    }\n  }\n\n  //Clears all clears; when used across media queries, for example\n  & > #{$target}:nth-child(1n) {\n    clear: none;\n  }\n\n  //Clear first item in each row\n  $items-per-row-n: $items-per-row + \"n\";\n\n  & > #{$target}:nth-child(#{$items-per-row-n} + 1){\n    clear: both;\n  }\n\n}\n","/// Force an element to self-clear its children.\n/// @see {mixin} unclearfix\n///\n/// @example markup - HTML\n/// <section class=\"container\">\n///     <div class=\"col-1 col\">\n///         <!-- Content Goes Here -->\n///     </div> <!-- /col-1 -->\n///     <div class=\"col-2 col\">\n///         <!-- Content Goes Here -->\n///     </div> <!-- /col-2 -->\n/// </section> <!-- /container -->\n///\n/// @example scss - SCSS\n/// .container {\n///   @include clearfix();\n///   .col-1,\n///   .col-2 {\n///     float: left;\n///     width: 50%;\n///   }\n/// }\n///\n/// @example css - CSS Output\n/// .container:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n///\n@mixin clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n\n/// Remove clearfix from an element after it's been applied.\n/// @see {mixin} clearfix\n///\n/// @example scss - SCSS\n/// .container {\n///   @include clearfix();\n///   @include mq(320px, 768px) {\n///     @include unclearfix();\n///   }\n/// }\n///\n/// @example css - CSS Output\n/// .container:after {\n///   content: \"\";\n///   display: table;\n///   clear: both;\n/// }\n///\n@mixin unclearfix {\n  &:after {\n    display: initial;\n    clear: none;\n  }\n}\n"],"sourceRoot":"/source/"}